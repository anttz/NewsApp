package com.example.android.newsapp;

import android.app.LoaderManager;
import android.content.Context;
import android.content.Intent;
import android.content.Loader;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;

import java.util.ArrayList;
import java.util.List;

public class MainActivity extends AppCompatActivity implements LoaderManager.LoaderCallbacks<List<News>> {

    private static final String GUARDIAN_URL = "http://content.guardianapis.com/search?order-by=newest&from-date=2014-01-01&q=basketball&api-key=test";
    private static final int NEWS_LOADER_ID = 1;
    boolean mIsConnected = false;
    private LoaderManager mLoaderManager;
    private TextView mEmptyTextView;
    private NewsAdapter mAdapter;
    private ProgressBar mLoadingProgressBar;
    private SwipeRefreshLayout mRefreshLayout;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        ListView newsListView = (ListView) findViewById(R.id.list);
        mAdapter = new NewsAdapter(this, R.layout.list_item, new ArrayList<News>());
        newsListView.setAdapter(mAdapter);
        mEmptyTextView = (TextView) findViewById(R.id.empty_textview);
        mEmptyTextView.setText(R.string.loading);
        mLoadingProgressBar = (ProgressBar) findViewById(R.id.loading_news_progress_bar);
        mLoadingProgressBar.setVisibility(View.GONE);
        mLoaderManager = getLoaderManager();
        mRefreshLayout = (SwipeRefreshLayout) findViewById(R.id.news_SwipeRefreshLayout);
        mRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                checkConnection();
                mLoaderManager.restartLoader(NEWS_LOADER_ID, null, MainActivity.this);
            }
        });
        checkConnection();
        if (mIsConnected) {
            mLoaderManager.initLoader(NEWS_LOADER_ID, null, this);
        } else {
            mLoadingProgressBar.setVisibility(View.GONE);
            mAdapter.clear();
            mEmptyTextView.setVisibility(View.VISIBLE);
            mEmptyTextView.setText(R.string.no_internet_connection);
        }
        newsListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                News currentNews = mAdapter.getItem(position);
                Uri webUrl = Uri.parse(currentNews.getmWebUrl());
                Intent intent = new Intent(Intent.ACTION_VIEW, webUrl);
                startActivity(intent);
            }
        });
    }

    private void checkConnection() {
        ConnectivityManager connectivityManager = (ConnectivityManager) MainActivity.this.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetwork = connectivityManager.getActiveNetworkInfo();
        mIsConnected = activeNetwork != null && activeNetwork.isConnectedOrConnecting();
    }

    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param id   The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @Override
    public Loader<List<News>> onCreateLoader(int id, Bundle args) {
        mLoadingProgressBar.setVisibility(View.VISIBLE);
        return new NewsLoader(this, GUARDIAN_URL);
    }

    /**
     * @param loader The Loader that has finished.
     * @param data   The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<List<News>> loader, List<News> data) {

        if (data != null && !data.isEmpty()) {
            mAdapter.clear();
            mAdapter.addAll(data);
            mEmptyTextView.setVisibility(View.GONE);
            mLoadingProgressBar.setVisibility(View.GONE);
            if (mRefreshLayout.isRefreshing()) {
                mRefreshLayout.setRefreshing(false);
            }
        } else if (data == null) {
            mAdapter.clear();
            mEmptyTextView.setVisibility(View.VISIBLE);
            if (mIsConnected == false) {
                mEmptyTextView.setText(R.string.no_internet_connection);
            } else {
                mEmptyTextView.setText(R.string.no_news_found);
            }
            mLoadingProgressBar.setVisibility(View.GONE);
            if (mRefreshLayout.isRefreshing()) {
                mRefreshLayout.setRefreshing(false);
            }
        } else {
            mLoadingProgressBar.setVisibility(View.GONE);
            mEmptyTextView.setVisibility(View.VISIBLE);
            if (mIsConnected == false) {
                mEmptyTextView.setText(R.string.no_internet_connection);
            } else {
                mEmptyTextView.setText(R.string.no_news_found);
            }
            mAdapter.clear();
            if (mRefreshLayout.isRefreshing()) {
                mRefreshLayout.setRefreshing(false);
            }
        }
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<List<News>> loader) {
        mAdapter.clear();
    }
}
